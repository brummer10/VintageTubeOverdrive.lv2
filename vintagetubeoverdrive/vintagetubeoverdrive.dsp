

/*******************************************************************************
**************************** File generated by *********************************
********************************************************************************
 ./build-plug.py -i VintageTubeDriver_p1.sch VintageTubeDriver_p2.sch VintageTubeDriver_p3.sch -t 2 -b -n VintageTubeOverdrive
*******************************************************************************/

// generated automatically
// DO NOT MODIFY!
declare id "vintagetubeoverdrive";
declare name "VintageTubeOverdrive";
declare category "Extern";
declare shortname "VintageTubeOverdrive";
declare description "VintageTubeOverdrive";

import("stdfaust.lib");


/*******************************************************************************
  * vintagetubedriver_p1a generated by dkbuiler from VintageTubeDriver_p1a.sch
*******************************************************************************/

p1a = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    b0 = 2.06222787767415e-5*fs;

    b1 = -2.06222787767415e-5*fs;

    a0 = 2.08287627355138e-5*fs + 0.000219388695339307;

    a1 = -2.08287627355138e-5*fs + 0.000219388695339307;
};

/*******************************************************************************
  * vintagetubedriver_p1b generated by dkbuiler from VintageTubeDriver_p1b.sch
*******************************************************************************/

p1b = pre : fi.iir((b0/a0,b1/a0,b2/a0),(a1/a0,a2/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Drive = vslider("Drive[name:Drive][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(5) : si.smooth(s);

    b0 = -0.00209477429815234*Drive*fs;

    b1 = 0;

    b2 = 0.00209477429815234*Drive*fs;

    a0 = Drive*(fs*(5.69979480774266e-10*fs + 2.89714413532304e-6) + 0.000104811251457812) + 5.69979480774267e-6*fs + 0.000209622502915624;

    a1 = Drive*(-1.13995896154853e-9*pow(fs,2) + 0.000209622502915624) + 0.000419245005831248;

    a2 = Drive*(fs*(5.69979480774266e-10*fs - 2.89714413532304e-6) + 0.000104811251457812) - 5.69979480774267e-6*fs + 0.000209622502915624;
};

/*******************************************************************************
  * 1-dimensional function table for linear interpolation
*******************************************************************************/

//-- Rdtable from waveform
rtable(table, r) = (table, int(r)):rdtable;

//-- Copy the sign of x to f
ccopysign(f, x) = ma.fabs(f) * sign(x);

//-- Get sign of value x
sign(x) = x<0, 1, -1 : select2;

//-- Check if value x is negative
fsignbit(x) = x<0;

//-- Get fractal part of value n
fractal(n) = n - int(n);

//-- Interpolate value between i and i+1 in table with fractal coefficient f.
interpolation(table, size, f, i) = select2(i<0,select2(i>size-2,
    rtable(table, i)*(1-f) + rtable(table,i+1)*f, rtable(table, size-1)),
    rtable(table, 0));

//-- Linear interpolation for value x in rdtable
circuit_response(table, low, high, step, size, x) =
    interpolation(table, size, fractal(linindex(step, x)),
    int(linindex(step, x))), x : ccopysign;

//-- Calculate linear table index for value x
linindex(step, x) = ma.fabs(x) * step;

/****************************************************************************************
* vintagetubedriver_p2_table generated by DK/circ_table_gen.py -- do not modify manually
****************************************************************************************/

 // variables used
 // --sig_max  1.400000
 // --table_div  3.064485
 // --table_op  1.000000

vintagetubedriver_p2_clip_f = circuit_response(vintagetubedriver_p2_table, low, high, step, size) with{

    low = 0;
    high =0.411956;
    step =142.143;
    size =200;

    vintagetubedriver_p2_table = waveform {
    0.000000000000,0.002020608266,0.004097109883,0.006227893150,0.008411385797,
    0.010646050224,0.012930379529,0.015262894206,0.017642139389,0.020066682575,
    0.022535111733,0.025046033758,0.027598073211,0.030189871291,0.032820085034,
    0.035487386672,0.038190463157,0.040928015807,0.043698760067,0.046501425364,
    0.049334755040,0.052197506354,0.055088450540,0.058006372908,0.060950072987,
    0.063918364694,0.066910076525,0.069924051766,0.072959148708,0.076014240873,
    0.079088217238,0.082179982455,0.085288457066,0.088412577710,0.091551297307,
    0.094703585242,0.097868427518,0.101044826898,0.104231803023,0.107428392508,
    0.110633649015,0.113846643309,0.117066463276,0.120292213932,0.123523017399,
    0.126758012857,0.129996356477,0.133237221326,0.136479797255,0.139723290756,
    0.142966924808,0.146209938698,0.149451587825,0.152691143481,0.155927892628,
    0.159161137647,0.162390196084,0.165614400366,0.168833097537,0.172045648958,
    0.175251430009,0.178449829784,0.181640250783,0.184822108599,0.187994831602,
    0.191157860625,0.194310648648,0.197452660489,0.200583372489,0.203702272213,
    0.206808858143,0.209902639392,0.212983135413,0.216049875721,0.219102399625,
    0.222140255967,0.225163002872,0.228170207508,0.231161445859,0.234136302503,
    0.237094370413,0.240035250757,0.242958552719,0.245863893325,0.248750897290,
    0.251619196867,0.254468431713,0.257298248766,0.260108302134,0.262898252990,
    0.265667769486,0.268416526670,0.271144206417,0.273850497365,0.276535094867,
    0.279197700945,0.281838024253,0.284455780050,0.287050690181,0.289622483055,
    0.292170893642,0.294695663463,0.297196540594,0.299673279667,0.302125641879,
    0.304553395004,0.306956313399,0.309334178029,0.311686776473,0.314013902947,
    0.316315358320,0.318590950132,0.320840492611,0.323063806688,0.325260720017,
    0.327431066986,0.329574688729,0.331691433141,0.333781154882,0.335843715388,
    0.337878982870,0.339886832322,0.341867145510,0.343819810977,0.345744724027,
    0.347641786722,0.349510907860,0.351352002964,0.353164994255,0.354949810633,
    0.356706387649,0.358434667470,0.360134598849,0.361806137083,0.363449243978,
    0.365063887800,0.366650043228,0.368207691307,0.369736819392,0.371237421090,
    0.372709496204,0.374153050671,0.375568096494,0.376954651676,0.378312740154,
    0.379642391720,0.380943641951,0.382216532132,0.383461109176,0.384677425544,
    0.385865539163,0.387025513339,0.388157416675,0.389261322980,0.390337311182,
    0.391385465236,0.392405874037,0.393398631320,0.394363835573,0.395301589940,
    0.396212002125,0.397095184295,0.397951252987,0.398780329008,0.399582537336,
    0.400358007027,0.401106871110,0.401829266494,0.402525333865,0.403195217591,
    0.403839065622,0.404457029389,0.405049263709,0.405615926686,0.406157179610,
    0.406673186865,0.407164115826,0.407630136768,0.408071422766,0.408488149599,
    0.408880495660,0.409248641857,0.409592771520,0.409913070312,0.410209726132,
    0.410482929030,0.410732871110,0.410959746447,0.411163750995,0.411345082502,
    0.411503940421,0.411640525827,0.411755041334,0.411847691008,0.411918680290,
    0.411968215910,0.411996505813,0.412003759075,0.411990185831,0.411955997193
    };
};

/*******************************************************************************
  * vintagetubedriver_p2 generated by dkbuiler from VintageTubeDriver_p2.sch
*******************************************************************************/

// use this line to implement the faust based table interpolation
//p2 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0),(a1/a0,a2/a0,a3/a0)) : vintagetubedriver_p2_clip_f with {
// use this line to implement the C based table interpolation
p2 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0),(a1/a0,a2/a0,a3/a0)) : vintagetubedriver_p2_clip with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;



    Tone = vslider("Tone[name:Tone][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);

    b0 = 1.51032483421641e-14*Tone*pow(fs,3) + 1.60672854703873e-11*pow(fs,2);

    b1 = -4.53097450264922e-14*Tone*pow(fs,3) - 1.60672854703873e-11*pow(fs,2);

    b2 = 4.53097450264922e-14*Tone*pow(fs,3) - 1.60672854703873e-11*pow(fs,2);

    b3 = -1.51032483421641e-14*Tone*pow(fs,3) + 1.60672854703873e-11*pow(fs,2);

    a0 = fs*(fs*(8.70253913610682e-15*fs + 1.61386401890662e-11) + 8.01348882317983e-9) + 7.17400553341744e-7;

    a1 = fs*(fs*(-2.61076174083205e-14*fs - 1.61386401890662e-11) + 8.01348882317983e-9) + 2.15220166002523e-6;

    a2 = fs*(fs*(2.61076174083205e-14*fs - 1.61386401890662e-11) - 8.01348882317983e-9) + 2.15220166002523e-6;

    a3 = fs*(fs*(-8.70253913610682e-15*fs + 1.61386401890662e-11) - 8.01348882317983e-9) + 7.17400553341744e-7;
};

    vintagetubedriver_p2_clip = ffunction(float vintagetubedriver_p2clip(float), "vintagetubedriver_p2_table.h", "");


/*******************************************************************************
  * vintagetubedriver_p3 generated by dkbuiler from VintageTubeDriver_p3.sch
*******************************************************************************/

p3 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Volume = vslider("Volume[name:Volume][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(3) : si.smooth(s);

    b0 = 2.08330921921294e-5*Volume*fs;

    b1 = -2.08330921921294e-5*Volume*fs;

    a0 = 2.0833311631967e-5*fs + 1.04166558159835e-6;

    a1 = -2.0833311631967e-5*fs + 1.04166558159835e-6;
};

process =  p1a : p1b : *(2.0) : p2 : p3 : *(2.0);
